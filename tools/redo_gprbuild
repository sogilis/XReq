#!/bin/echo This file must be sourced by a shell
# kate: hl sh;

redo_gprbuild(){
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "redo_gprbuild: must specify a gpr project and an output file (\$3)" >&2
    return 1
  elif ! [ -f "$1" ]; then
    echo "$1: file not found" >&2
    return 1
  fi
  
  # get absolute paths for arguments
  local gpr="$(cd "`dirname "$1"`"; pwd)/$(basename "$1")"
  local out="$(cd "`dirname "$2"`"; pwd)/$(basename "$2")"
  
  : ${GPRBUILD:=gprbuild}
  : ${GPRBUILD_FLAGS:=-p}
  : ${GPR_FLAGS:=}

  # Warning: gprbuild -o option doesn't handle absolute paths such as $out :/
  echo PWD=$PWD $GPRBUILD $GPRBUILD_FLAGS -P"$gpr" $GPR_FLAGS -o "$2" >&2
  $GPRBUILD $GPRBUILD_FLAGS -P"$gpr" $GPR_FLAGS -o "$2" --create-map-file="$out.map" >&2

  if [ -f "$out.map" ]; then

    # extract object files and libraries from map file
    # FIXME: this is very platform dependant (this is a linker script)
    #        find a better way to locate object dependancies.
    local objfiles="$(grep "^LOAD " "$out.map" | cut -c6-)"
    if [ -z "$objfiles" ]; then
      objfiles="$(egrep '^\[...\] .*\.o$' "$out.map" | cut -c7-)"
    fi
    
    # move into object directory
    local olddir="$(pwd)"
    cd "$(gnat ls -P"$gpr" $GPR_FLAGS -v | grep "^Object Search Path:$" -A2 | tail -n 1 | sed 's/^ *//')"

    # mark object files as dependencies
    echo "$objfiles" | tr \\n \\0 | xargs -0 redo-ifchange
    
    # mark source files for each object file as dependency
    echo "$objfiles" \
      | grep "\.o$" \
      | tr \\n \\0 \
      | xargs -0 -n 1 gnat ls -P"$gpr" $GPR_FLAGS -d -a -s \
      | grep -v -F "Can't find library info for " \
      | sed 's/^\s*//' \
      | grep . \
      | tr \\n \\0 \
      | xargs -0 redo-ifchange
    
    # move back
    cd "$olddir"
    
    # remove map file
    rm -f "$out.map"

  fi
}

