-------------------------------------------------------------------------------
--  XReq  --  Behaviour Driven Developpement tool for compiled languages     --
--  Copyright (c) 2010, SOGILIS <http://sogilis.com>                         --
--                                                                           --
--  This program is free software: you can redistribute it and/or modify     --
--  it under the terms of the GNU Affero General Public License as           --
--  published by the Free Software Foundation, either version 3 of the       --
--  License, or (at your option) any later version.                          --
--                                                                           --
--  This program is distributed in the hope that it will be useful,          --
--  but WITHOUT ANY WARRANTY; without even the implied warranty of           --
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            --
--  GNU Affero General Public License for more details.                      --
--                                                                           --
--  You should have received a copy of the GNU Affero General Public License --
--  along with this program.  If not, see <http://www.gnu.org/licenses/>.    --
--                                                                           --
-------------------------------------------------------------------------------
-- kate: hl Ada; indent-width 3;

with "config";

--  This is the version of the library that should run without the GNAT run-time
--  and should be able to elaborate itself properly. Currently, this contains
--  only symbols for the C language.

--  Because it uses automatic elaboration, it cannot be compiled statically. It
--  should be compatible with ELF targets and might not be compatible with other
--  platforms. If there is a need for other platforms, there should be a GNAT
--  Guru in the room to tell us what to do. This is probably removing the 
--  auto-elaboration and have the program elaborate the library by hand.

library project LibXReq is

   type Mode_Type is ("debug", "release", "coverage");
   Mode : Mode_Type := external ("mode", "debug");

   type Lib_Type is ("dynamic");  --  "static"
   Lib_Kind : Lib_Type := external ("type", "dynamic");
   --  Static libraries don't work stand alone (with elaboration). Some symbols
   --  of the elaboration will appear twice making the linking impossible.

   for Library_Name      use "xreq";
   for Source_Dirs       use ("src/lib", "src/common", "src/lib/" & Lib_Kind);
   for Object_Dir        use "obj/" & Lib_Kind & "-" & Mode;
   for Library_Dir       use "lib/" & Mode;
   for Library_Kind      use Lib_Kind;
   for Library_Auto_Init use "true";
   for Library_Interface use ("XReqLib",
                              "XReqLib.Report",
                              "XReqLib.Args",
                              "XReqLib.String_Tables",
                              "XReqLib.Tables",
                              "XReqLib.General",
                              "XReqLib.Asserts",
                              "XReqLib.C_Interface",
                              "XReqLib.CLI",
                              "XReqLib.Util",
                              "XReqLib.ANSI",
                              "XReqLib.Error_Handling",
                              "XReqLib.Format",
                              "XReqLib.Format.HTML",
                              "XReqLib.Format.Text");
   for Library_Options   use Config.Ada_Switches_Linker_Coverage;
   --  Why isn't this in package Linker, this is really damn confusing !!!

   package Compiler is
      case Mode is
         when "debug" =>
            for Default_Switches ("Ada") use Config.Ada_Switches_Debug;
         when "release" =>
            for Default_Switches ("Ada") use Config.Ada_Switches_Release;
         when "coverage" =>
            for Default_Switches ("Ada") use Config.Ada_Switches_Coverage;
      end case;
   end Compiler;

   package Binder is
      case Mode is
         when "debug" =>
            for Default_Switches ("Ada") use Config.Ada_Switches_Binder_Debug;
         when "coverage" =>
            for Default_Switches ("Ada") use Config.Ada_Switches_Binder_Coverage;
         when others =>
            null;
      end case;
   end Binder;

end LibXReq;
