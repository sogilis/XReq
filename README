Project Organisation
====================

Documentation files (both in text and HTML format):

- [`README`](README.html): Project organisation
- [`src/README`](src/README.html): Source organisation

Main directories:

- `src`:        Project source
- `tests`:      Source directory for AUnits tests
- `obj`:        Built objects directory
- `bin`:        Built executables directory
- `features`:   The feature files to test adaspec2
- `doc`:        Contains the documentation
- `coverage`:   Contains the coverage information produced by gcov

The file `Markdown.pl` is used to generate HTML pages from the text files using
the [Markdown](http://daringfireball.net/projects/markdown/) syntax

Project files
-------------

- `config.gpr`: GNAT abstract project containing a centralized configuration
- `main.gpr`:   GNAT project to build adaspec2
- `tests.gpr`:  GNAT projects for AUnit tests
- `Makefile`:   Standard Makefile


`features` directory
--------------------

The `features` directory contains many different `.feature` files that describe
features of wspec using the [cucumber](http://cukes.info/) syntax. It also
contains:

- `cucumber`: This contains the cucumber features that do not apply to adaspec2
  yet. They should be modified to fit adaspec2 in the future.

- `step_definitions`: The step definitions written in Ada that translate the
  sentances in the feature files in code that can be executed

- `tests`: Contains the tests generated by adaspec2 from the feature files. The
  tests generated have the same name as the feature file but with a `.ads` or
  `.adb` suffix.


Testing code coverage using gcov
================================

The project is compiled with code coverage information. To measure the code
covered by the tests, you first need to do in this order:

- build the project (`make bin`)
- remove previous coverage information (`make gcov-reset`)
- run tests to build coverage information (`bin/tests`)
- run gcov to produce output data in the `coverage` directory (`make gcov`)

You can do all of this in one step running `make coverage`.

The `.gcov` files are the same as the source files (`.adb`) but prefixed with
the number of times the line was executed. `-` means that the line contains no
code, but `#####` means that the line was never executed. Those lines should not
appear in 100% coverage is the goal.

A `summary.txt` is also created with the output of gcov containing the coverage
ratio for each file and each function.

It is possible to generate additional coverage information to test dead code for
instance by running another executable instead of the AUnit test suite.
